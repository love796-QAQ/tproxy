define TPROXY_PORT = 12345
define TPROXY_MARK = 0x1
define BYPASS_MARK  = 0x55

table inet tproxy_table {
    # 局域网 IPv4 地址段
    set ipv4_private {
        type ipv4_addr
        flags interval
        auto-merge
        elements = {
            127.0.0.0/8,
            10.0.0.0/8,
            172.16.0.0/12,
            192.168.0.0/16,
            169.254.0.0/16
        }
    }

    # 局域网 IPv6 地址段
    set ipv6_private {
        type ipv6_addr
        flags interval
        auto-merge
        elements = {
            ::1,
            fc00::/7,
            fe80::/10
        }
    }

    # 需要旁路（转发给副路由）的设备
    set bypass_macs {
        type ether_addr
        elements = {
            3C:FA:06:80:BD:77  # Xbox MAC
        }
    }

    # 指定需要代理的 MAC 地址集合
    set proxy_macs {
        type ether_addr
        elements = {
            16:5B:B8:43:3C:40,
            62:DA:8E:A8:DD:2D
        }
    }

    chain prerouting {
        type filter hook prerouting priority mangle; policy accept;

        # 放行 DHCP 请求
        udp dport { 67, 68 } accept

        # 透明拦截 DNS（UDP+TCP）
        ether saddr @proxy_macs meta l4proto { tcp, udp } th dport 53 tproxy to :$TPROXY_PORT meta mark set $TPROXY_MARK accept

        # 防止 TProxy 自己接管自己（防环路）
        fib daddr type local meta l4proto { tcp, udp } th dport $TPROXY_PORT reject
        fib daddr type local accept

        # 放行内网、本地链路、本机流量
        ip daddr @ipv4_private accept
        ip6 daddr @ipv6_private accept

        # 旁路设备：打标（IPv4 + IPv6）转发给副路由，不进入 TProxy
        ether saddr @bypass_macs meta l4proto { tcp, udp } meta mark set $BYPASS_MARK accept

        # 拦截所有其他 TCP/UDP，转发到 TProxy
        ether saddr @proxy_macs meta l4proto { tcp, udp } tproxy to :$TPROXY_PORT meta mark set $TPROXY_MARK accept
    }
}